import{r as n}from"./index-C8OgQ19d.js";const m=(p={},c={},a=null)=>{const[o,h]=n.useState(p),[u,g]=n.useState({}),[l,y]=n.useState({}),[C,b]=n.useState(!1),f=n.useCallback((e,r)=>{const t=c[e];if(!t)return"";if(t.required){if(typeof r=="boolean"){if(!r)return typeof t.required=="string"?t.required:`${e} is required`}else if(typeof r=="string"){if(!r||r.trim()==="")return typeof t.required=="string"?t.required:`${e} is required`}else if(!r)return typeof t.required=="string"?t.required:`${e} is required`}if(t.minLength&&r&&typeof r=="string"){const s=typeof t.minLength=="object"?t.minLength.value:t.minLength,i=typeof t.minLength=="object"?t.minLength.message:`${e} must be at least ${s} characters`;if(r.length<s)return i}if(t.maxLength&&r&&typeof r=="string"){const s=typeof t.maxLength=="object"?t.maxLength.value:t.maxLength,i=typeof t.maxLength=="object"?t.maxLength.message:`${e} must be no more than ${s} characters`;if(r.length>s)return i}if(t.pattern&&r&&typeof r=="string"){const s=typeof t.pattern=="object"?t.pattern.value:t.pattern,i=typeof t.pattern=="object"?t.pattern.message:`${e} format is invalid`;if(s&&typeof s.test=="function"&&!s.test(r))return i}if(t.validate&&typeof t.validate=="function"){const s=t.validate(r,o);if(s)return s}return""},[c,o]),d=n.useCallback(()=>{const e={};return Object.keys(c).forEach(r=>{const t=f(r,o[r]);t&&(e[r]=t)}),g(e),Object.keys(e).length===0},[f,c,o]),k=n.useCallback((e,r)=>{h(t=>({...t,[e]:r})),u[e]&&g(t=>({...t,[e]:""}))},[u]),L=n.useCallback(e=>{y(t=>({...t,[e]:!0}));const r=f(e,o[e]);g(t=>({...t,[e]:r}))},[f,o]),j=n.useCallback(async e=>{e&&e.preventDefault();const r={};if(Object.keys(c).forEach(s=>{r[s]=!0}),y(r),!!d()&&a&&typeof a=="function"){b(!0);try{await a(o)}catch(s){console.error("Form submission error:",s)}finally{b(!1)}}},[d,a,o,c]),q=n.useCallback(()=>Object.keys(c).every(e=>!f(e,o[e])),[f,c,o]),x=n.useCallback(()=>{h(p),g({}),y({}),b(!1)},[p]),E=n.useCallback(e=>{h(r=>({...r,...e}))},[]),$=n.useCallback(e=>{const r=l[e]?u[e]:"",t=l[e]&&u[e];return{name:e,value:o[e]||"",onChange:s=>{const i=s.target.type==="checkbox"?s.target.checked:s.target.value;k(e,i)},onBlur:()=>L(e),error:r,hasError:t}},[o,u,l,k,L]);return{values:o,errors:u,touched:l,isSubmitting:C,handleChange:k,handleBlur:L,handleSubmit:j,isValid:q,resetForm:x,validateForm:d,getFieldProps:$,setValues:E}};export{m as u};
