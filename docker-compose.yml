version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    environment:
      - VITE_API_URL=http://backend:3001
    networks:
      - notorix-network
    restart: unless-stopped

  # Backend Service  
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:admin@db:5432/notorix
      - JWT_SECRET=notorix_super_secure_jwt_secret_production_2024
      - CORS_ORIGINS=http://localhost,https://your-domain.com
    depends_on:
      - db
    networks:
      - notorix-network
    restart: unless-stopped
    volumes:
      - ./backend/logs:/app/logs

  # Database Service
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=notorix
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/create-tables.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - notorix-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching (Optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - notorix-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  notorix-network:
    driver: bridge 